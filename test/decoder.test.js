'use strict';

const assert = require('assert');
const protocol = require('../lib/protocol');
const ProtocolDecoder = require('../lib/decoder');
const PassThrough = require('stream').PassThrough;

describe('test/decode.test.js', () => {
  const buf = new Buffer('0202000002010000000104010000002e0000000002ee636f6d2e616c697061792e736f66612e7270632e636f72652e726573706f6e73652e536f6661526573706f6e73654fbe636f6d2e616c697061792e736f66612e7270632e636f72652e726573706f6e73652e536f6661526573706f6e7365940769734572726f72086572726f724d73670b617070526573706f6e73650d726573706f6e736550726f70736f90464e4fc849636f6d2e616c697061792e6163637472616e7371756572792e636f6d6d6f6e2e736572766963652e6661636164652e726573756c742e4163637472616e735175657279526573756c74a80b72657475726e436f756e74106c61746573745472616e734c6f67496407686973446174650b6163636f756e7444617465116163636f756e7449734661696c6f7665720971756572795478496407737563636573730a726573756c74436f64650a726573756c74446573630c72657475726e416d6f756e740c6163636f756e744c6f67564f106163636f756e744c6f67564f4c697374146163636f756e744c6f6753746174564f4c697374116163636f756e744c6f6753756d496e666f126163636f756e744c6f67506167654c69737411667265657a654c6f67506167654c697374166163636f756e74467265657a654c6f67564f4c69737413667265657a654163636f756e74564f4c6973740e6163636f756e744461696c79564f14696e6e65724163636f756e74496e666f4c69737410696e6e65724163636f756e74496e666f18696e6e65724163636f756e74496e666f506167654c6973741773696d706c65496e5472616e73556e6971564f4c6973740c6572726f72436f6e746578746f91e0e00832303137303330314e461032303838313032303031323637333737541451554552595f524553554c545f5355434345535302e68890e58a9f4fb7636f6d2e6977616c6c65742e62697a2e636f6d6d6f6e2e7574696c2e6d6f6e65792e4d6f6e6579920463656e740863757272656e63796f92e04fa26a6176612e7574696c2e43757272656e6379910c63757272656e6379436f64656f9303434e594e566e007a566e007a4e4e4e566e007a566e007a4e566e007a4e4e566e007a4e4e1d21b1fa', 'hex');

  it('should decode bolt v2 with crc response', () => {
    const o = protocol.decode(buf);
    assert(o && o.options);
    assert(o.packetId === 1);
    assert(o.packetType === 'response');
    assert(o.data && !o.data.error);
    assert(o.data.appResponse);
    assert(o.data.appResponse.hisDate === '20170301');
    assert.deepEqual(o.options, {
      protocolType: 'bolt2',
      boltVersion: 2,
      codecType: 'hessian2',
      crcEnable: true,
    });
    assert(o.className === 'com.alipay.sofa.rpc.core.response.SofaResponse');
  });

  it('should decode with decoder', done => {
    const decoder = new ProtocolDecoder({ sentReqs: new Map() });
    const socket = new PassThrough();
    socket.pipe(decoder);

    decoder.on('response', res => {
      assert(res && res.options);
      assert(res.packetId === 1);
      assert(res.packetType === 'response');
      assert(res.data && !res.data.error);
      assert(res.data.appResponse);
      assert(res.data.appResponse.hisDate === '20170301');
      assert.deepEqual(res.options, {
        protocolType: 'bolt2',
        boltVersion: 2,
        codecType: 'hessian2',
        crcEnable: true,
      });
      assert(res.className === 'com.alipay.sofa.rpc.core.response.SofaResponse');
      done();
    });
    socket.write(buf);
  });

  it('should decode RpcServerException ok', () => {
    const buf = new Buffer('0100000201000000010400020034000000000461636f6d2e616c697061792e72656d6f74696e672e7270632e657863657074696f6e2e527063536572766572457863657074696f6e4fc834636f6d2e616c697061792e72656d6f74696e672e7270632e657863657074696f6e2e527063536572766572457863657074696f6e940d64657461696c4d6573736167650563617573650a737461636b54726163651473757070726573736564457863657074696f6e736f905300d1636f6d2e616c697061792e72656d6f74696e672e657863657074696f6e2e436f646563457863657074696f6e3a20457863657074696f6e20636175676874207768656e20646573657269616c697a6520636f6e74656e74206f6620727063207265717565737420636f6d6d616e64212e204164646974696f6e616c4572724d73673a20446573657269616c697a652052706352657175657374436f6d6d616e64206661696c6564207768656e2070726f6365737320696e205270635265717565737450726f636573736f722c2069643d314a005674001c5b6a6176612e6c616e672e537461636b5472616365456c656d656e746e084fab6a6176612e6c616e672e537461636b5472616365456c656d656e74940e6465636c6172696e67436c6173730a6d6574686f644e616d650866696c654e616d650a6c696e654e756d6265726f91530032636f6d2e616c697061792e72656d6f74696e672e7270632e70726f746f636f6c2e52706352657175657374436f6d6d616e6412646573657269616c697a65436f6e74656e741652706352657175657374436f6d6d616e642e6a617661c8856f91530022636f6d2e616c697061792e72656d6f74696e672e7270632e527063436f6d6d616e640b646573657269616c697a650f527063436f6d6d616e642e6a617661c85e6f91530022636f6d2e616c697061792e72656d6f74696e672e7270632e527063436f6d6d616e640b646573657269616c697a650f527063436f6d6d616e642e6a617661c8736f91530034636f6d2e616c697061792e72656d6f74696e672e7270632e70726f746f636f6c2e5270635265717565737450726f636573736f7209646f50726f63657373185270635265717565737450726f636573736f722e6a617661c8866f91530040636f6d2e616c697061792e72656d6f74696e672e7270632e70726f746f636f6c2e5270635265717565737450726f636573736f722450726f636573735461736b0372756e185270635265717565737450726f636573736f722e6a617661c92d6f915300276a6176612e7574696c2e636f6e63757272656e742e546872656164506f6f6c4578656375746f720972756e576f726b657217546872656164506f6f6c4578656375746f722e6a617661cc7b6f9153002e6a6176612e7574696c2e636f6e63757272656e742e546872656164506f6f6c4578656375746f7224576f726b65720372756e17546872656164506f6f6c4578656375746f722e6a617661ca6e6f91106a6176612e6c616e672e5468726561640372756e0b5468726561642e6a617661cb517a567400326a6176612e7574696c2e436f6c6c656374696f6e7324556e6d6f6469666961626c6552616e646f6d4163636573734c6973746e007a', 'hex');
    const o = protocol.decode(buf);
    assert(o.packetId === 1);
    assert(o.packetType === 'response');
    assert(o.data && o.data.error);
    assert(o.data.error.message, 'com.alipay.remoting.rpc.exception.RpcServerException: com.alipay.remoting.exception.CodecException: Exception caught when deserialize content of rpc request command!. AdditionalErrMsg: Deserialize RpcRequestCommand failed when process in RpcRequestProcessor, id=1');
    assert.deepEqual(o.options, { protocolType: 'bolt', codecType: 'hessian2' });
  });
});
